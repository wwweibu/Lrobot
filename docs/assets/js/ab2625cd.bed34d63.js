"use strict";(self.webpackChunkmy_docs=self.webpackChunkmy_docs||[]).push([[3192],{4512:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"2\u4f7f\u7528\u6307\u5357/7\u5e73\u53f0\u8fdb\u9636\u914d\u7f6e/3\u5e9f\u5f03\u5e73\u53f0","title":"\u5e9f\u5f03\u5e73\u53f0","description":"QQ \u5c0f\u7a0b\u5e8f\u3001\u5fae\u535a\u3001\u5fae\u4fe1\u5f00\u653e\u5e73\u53f0\u3001botpy\u3001LLOneBot \u5f00\u53d1\u4ee3\u7801","source":"@site/docs/2\u4f7f\u7528\u6307\u5357/7\u5e73\u53f0\u8fdb\u9636\u914d\u7f6e/3\u5e9f\u5f03\u5e73\u53f0.md","sourceDirName":"2\u4f7f\u7528\u6307\u5357/7\u5e73\u53f0\u8fdb\u9636\u914d\u7f6e","slug":"/2\u4f7f\u7528\u6307\u5357/7\u5e73\u53f0\u8fdb\u9636\u914d\u7f6e/3\u5e9f\u5f03\u5e73\u53f0","permalink":"/Lrobot/docs/2\u4f7f\u7528\u6307\u5357/7\u5e73\u53f0\u8fdb\u9636\u914d\u7f6e/3\u5e9f\u5f03\u5e73\u53f0","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"\u5e9f\u5f03\u5e73\u53f0","description":"QQ \u5c0f\u7a0b\u5e8f\u3001\u5fae\u535a\u3001\u5fae\u4fe1\u5f00\u653e\u5e73\u53f0\u3001botpy\u3001LLOneBot \u5f00\u53d1\u4ee3\u7801"},"sidebar":"tutorialSidebar","previous":{"title":"\u5e73\u53f0\u8fdb\u9636\u914d\u7f6e","permalink":"/Lrobot/docs/category/\u5e73\u53f0\u8fdb\u9636\u914d\u7f6e"},"next":{"title":"\u5e73\u53f0\u56de\u8c03\u539f\u7406","permalink":"/Lrobot/docs/2\u4f7f\u7528\u6307\u5357/7\u5e73\u53f0\u8fdb\u9636\u914d\u7f6e/\u5e73\u53f0\u56de\u8c03\u539f\u7406"}}');var a=r(4848),s=r(8453);const i={sidebar_position:3,title:"\u5e9f\u5f03\u5e73\u53f0",description:"QQ \u5c0f\u7a0b\u5e8f\u3001\u5fae\u535a\u3001\u5fae\u4fe1\u5f00\u653e\u5e73\u53f0\u3001botpy\u3001LLOneBot \u5f00\u53d1\u4ee3\u7801"},o=void 0,d={},c=[{value:"qqapp(\u53c2\u8003)",id:"qqapp\u53c2\u8003",level:2},{value:"\u5c0f\u7a0b\u5e8f\u5f00\u53d1(qqapp)",id:"\u5c0f\u7a0b\u5e8f\u5f00\u53d1qqapp",level:4},{value:"\u5c0f\u7a0b\u5e8f\u56fe\u7247\u538b\u7f29",id:"\u5c0f\u7a0b\u5e8f\u56fe\u7247\u538b\u7f29",level:4},{value:"botpy",id:"botpy",level:2},{value:"weibo",id:"weibo",level:2},{value:"wechatopen",id:"wechatopen",level:2},{value:"LLOneBot",id:"llonebot",level:2}];function _(n){const e={a:"a",code:"code",h2:"h2",h4:"h4",li:"li",ol:"ol",pre:"pre",ul:"ul",...(0,s.R)(),...n.components},{Details:r}=e;return r||function(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(e.h2,{id:"qqapp\u53c2\u8003",children:["qqapp(",(0,a.jsx)(e.a,{href:"https://q.qq.com/wiki/#_4-%E5%BC%80%E5%8F%91qq%E5%B0%8F%E7%A8%8B%E5%BA%8F",children:"\u53c2\u8003"}),")"]}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsx)(e.li,{children:"\u586b\u5199\u5c0f\u7a0b\u5e8f\u540d\u79f0\u3001\u7b80\u4ecb\uff0c\u4e0a\u4f20\u56fe\u7247\uff0c\u8bbe\u7f6e\u7c7b\u76ee\u6807\u7b7e\uff0c\u63d0\u4ea4\u5907\u6848"}),"\n",(0,a.jsxs)(e.li,{children:["\u4e0b\u8f7d",(0,a.jsx)(e.a,{href:"https://q.qq.com/wiki/tools/devtool/stable.html",children:"\u5f00\u53d1\u5de5\u5177"})]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"\u5f00\u53d1-\u5f00\u53d1\u8bbe\u7f6e"}),"\u91cc\u8bb0\u5f55 AppID \u548c AppSecret"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"\u5f00\u53d1-\u5f00\u53d1\u8bbe\u7f6e"})," \u91cc\u914d\u7f6e\u670d\u52a1\u5668\u57df\u540d"]}),"\n"]}),"\n",(0,a.jsx)(e.h4,{id:"\u5c0f\u7a0b\u5e8f\u5f00\u53d1qqapp",children:"\u5c0f\u7a0b\u5e8f\u5f00\u53d1(qqapp)"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["\u5c0f\u7a0b\u5e8f\u7528\u6237\u9a8c\u8bc1",(0,a.jsx)(e.a,{href:"https://q.qq.com/wiki/develop/miniprogram/API/open_port/port_userinfo.html",children:"\u53c2\u8003\u6587\u6863"})]}),"\n",(0,a.jsx)(e.li,{children:"\u5c0f\u7a0b\u5e8f\u7ba1\u7406\u5458\u8ba4\u8bc1\u5728 connect.qq.com \u7533\u8bf7\u83b7\u53d6\u7528\u6237 unionid \uff0c\u4f7f\u5f97\u7ba1\u7406\u5458\u8ba4\u8bc1\u552f\u4e00\uff0c\u53d6\u4ee3\u4e86\u4e4b\u524d\u4f7f\u7528\u7528\u6237\u6635\u79f0\u7684\u65b9\u5f0f"}),"\n",(0,a.jsx)(e.li,{children:"\u5c0f\u7a0b\u5e8f\u9875\u9762\u8df3\u8f6c\u4f7f\u7528 navigateBack \u4ee3\u66ff To \u6765\u907f\u514d10\u4e2a\u9875\u9762\u7684\u4e0a\u9650\uff0c\u5e76\u4e14\u4fee\u6539/\u5220\u9664\u540e\u8fd8\u80fd\u56de\u5230\u539f\u5149\u6807\u5904,\u73b0\u5728\u7a0b\u5e8f\u8fd0\u884c\u975e\u5e38\u5feb"}),"\n"]}),"\n",(0,a.jsx)(e.h4,{id:"\u5c0f\u7a0b\u5e8f\u56fe\u7247\u538b\u7f29",children:"\u5c0f\u7a0b\u5e8f\u56fe\u7247\u538b\u7f29"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"\u53c2\u8003\u4ee3\u7801\uff1a"}),"\n",(0,a.jsx)(e.li,{children:"\u538b\u7f29\u523050kb\u4e0d\u5f71\u54cd\u7f29\u7565\u56fe\u89c2\u770b"}),"\n",(0,a.jsx)(e.li,{children:"\u53c2\u8003chatgpt\u7684\u4e24\u4e2a\u5bf9\u8bdd"}),"\n"]}),"\n",(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:"\u7269\u8d44\u79df\u501f\u5c0f\u7a0b\u5e8f\u540e\u7aef\uff0c\u542b\u767b\u5f55\u51fd\u6570login"}),(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:'# \u7269\u8d44\u79df\u501f\u5c0f\u7a0b\u5e8f\u63a5\u6536\u6d88\u606f\r\nimport requests as re\r\nfrom fastapi import APIRouter, Request, UploadFile\r\nfrom config import config\r\nfrom log import loggers\r\nfrom logic import (\r\n    authenticate_user,\r\n    query_material,\r\n    delete_materials,\r\n    update_materials,\r\n    add_materials,\r\n)\r\n\r\n\r\nrouter = APIRouter()\r\nadapter_logger = loggers["adapter"]\r\n\r\n\r\n@router.get("/login")\r\nasync def material_login(nickname: str, code: str):\r\n    """\u767b\u5f55"""\r\n    if nickname in config["admin_nicknames"]:\r\n        # \u53ea\u5904\u7406\u7ba1\u7406\u5458\u5217\u8868\u4e2d\u7684\u6635\u79f0\r\n        response = re.get(\r\n            "https://api.q.qq.com/sns/jscode2session",\r\n            params={\r\n                "appid": config["QQAPP_ID"],\r\n                "secret": config["QQAPP_SECRET"],\r\n                "js_code": code,  # \u7528 encryptedData \u4f5c\u4e3a js_code \u53d1\u9001\r\n                "grant_type": "authorization_code",\r\n            },\r\n        )\r\n        # \u53d1\u9001\u9a8c\u8bc1\u6d88\u606f\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            unionid = data.get("unionid")\r\n            # print(unionid) # \u7528\u4e8e\u6dfb\u52a0\u7ba1\u7406\u5458\uff0c\u5148\u628auser_name\u6dfb\u52a0\u8fdb\u5217\u8868\uff0c\u7136\u540e\u67e5\u770b\u6253\u5370\u51fa\u7684unionid\r\n            if unionid in config["admin_uid"]:\r\n                adapter_logger.info(\r\n                    f"\u2308QQAPP\u230b \u7ba1\u7406\u5458{nickname}\u6210\u529f\u767b\u5f55", extra={"event": "\u7a0b\u5e8f\u767b\u5f55"}\r\n                )\r\n                return {"success": True, "message": "0"}  # \u7ba1\u7406\u5458\u767b\u5f55\u6210\u529f\r\n\r\n    result = await authenticate_user(nickname, "1")\r\n    if result == 1:\r\n        adapter_logger.info(\r\n            f"\u2308QQAPP\u230b \u7528\u6237{nickname}\u6210\u529f\u767b\u5f55", extra={"event": "\u7a0b\u5e8f\u767b\u5f55"}\r\n        )\r\n        return {"success": True, "message": "1"}  # \u666e\u901a\u7528\u6237\u767b\u5f55\u6210\u529f\r\n    else:\r\n        adapter_logger.error(\r\n            f"\u2308QQAPP\u230b \u7528\u6237{nickname}\u767b\u5f55\u5931\u8d25", extra={"event": "\u7a0b\u5e8f\u767b\u5f55"}\r\n        )\r\n        return {"success": True, "message": "2"}  # \u767b\u5f55\u5931\u8d25\r\n\r\n\r\n@router.get("/query")\r\nasync def material_query(\r\n    nickname: str,\r\n    code: str,\r\n    selectedType: str,\r\n):\r\n    # \u7528\u6237\u8bbf\u95ee\u8d44\u6e90\r\n    auth_code = await authenticate_user(nickname, code)\r\n    if auth_code == 2:\r\n        adapter_logger.error(\r\n            f"\u2308QQAPP\u230b \u964c\u751f\u7528\u6237{nickname}\u8bbf\u95ee\u8d44\u6e90\u5217\u8868", extra={"event": "\u8d44\u6e90\u8bbf\u95ee"}\r\n        )\r\n        return {"success": True, "message": "3"}\r\n\r\n    if selectedType not in ["boardgames", "scriptmurders", "publications"]:\r\n        adapter_logger.error(\r\n            f"\u2308QQAPP\u230b \u7528\u6237{nickname}\u8bbf\u95ee\u65e0\u6548\u7684\u7269\u8d44\u7c7b\u578b", extra={"event": "\u8d44\u6e90\u8bbf\u95ee"}\r\n        )\r\n\r\n        return {"success": True, "message": "4"}\r\n\r\n    response_data = await query_material(selectedType)\r\n    adapter_logger.info(\r\n        f"\u2308QQAPP\u230b \u7528\u6237{nickname}\u83b7\u53d6\u7269\u8d44\u5217\u8868\u6210\u529f", extra={"event": "\u8d44\u6e90\u8bbf\u95ee"}\r\n    )\r\n    return {"success": True, "message": "5", "data": response_data}\r\n\r\n\r\n@router.get("/delete")\r\nasync def material_delete(nickname: str, code: str, selectedType: str, originalID: str):\r\n    # \u7ba1\u7406\u5458\u5220\u9664\u8d44\u6e90\r\n    auth_code = await authenticate_user(nickname, code)\r\n    if auth_code != 0:\r\n        adapter_logger.error(\r\n            f"\u2308QQAPP\u230b \u964c\u751f\u7528\u6237{nickname}\u8bd5\u56fe\u5220\u9664\u8d44\u6e90", extra={"event": "\u8d44\u6e90\u5220\u9664"}\r\n        )\r\n        return {"success": True, "message": "6"}\r\n\r\n    result = await delete_materials(selectedType, originalID)\r\n    if result == 1:\r\n        adapter_logger.info(\r\n            f"\u2308QQAPP\u230b \u7ba1\u7406{nickname}\u5220\u9664\u4e86ID\u4e3a{originalID}\u7684\u8bb0\u5f55",\r\n            extra={"event": "\u8d44\u6e90\u5220\u9664"},\r\n        )\r\n        return {"success": True, "message": "9"}\r\n    else:\r\n        adapter_logger.error(\r\n            f"\u2308QQAPP\u230b \u7ba1\u7406{nickname}\u8bd5\u56fe\u5220\u9664\u4e0d\u5b58\u5728\u7684\u8d44\u6e90", extra={"event": "\u8d44\u6e90\u5220\u9664"}\r\n        )\r\n        return {"success": True, "message": "7"}\r\n\r\n\r\n@router.post("/update")\r\nasync def material_update(\r\n    nickname: str,\r\n    code: str,\r\n    selectedType: str,\r\n    originalID: str,\r\n    image: UploadFile,\r\n    request: Request,\r\n):\r\n    # \u7ba1\u7406\u5458\u66f4\u65b0\u8d44\u6e90\r\n    auth_code = await authenticate_user(nickname, code)\r\n    if auth_code != 0:\r\n        adapter_logger.error(\r\n            f"\u2308QQAPP\u230b \u964c\u751f\u7528{nickname}\u8bd5\u56fe\u4fee\u6539\u8d44\u6e90", extra={"event": "\u8d44\u6e90\u4fee\u6539"}\r\n        )\r\n        return {"success": True, "message": "10"}\r\n\r\n    if selectedType not in ["boardgames", "scriptmurders", "publications"]:\r\n        adapter_logger.error(\r\n            f"\u2308QQAPP\u230b \u7ba1\u7406\u5458{nickname}\u4fee\u6539\u65e0\u6548\u7684\u7269\u8d44\u7c7b\u578b", extra={"event": "\u8d44\u6e90\u4fee\u6539"}\r\n        )\r\n        return {"success": True, "message": "11"}\r\n\r\n    result, original_data, filtered_new_values = await update_materials(\r\n        selectedType, originalID, request, image\r\n    )\r\n    if result == 0:\r\n        adapter_logger.error(\r\n            f"\u2308QQAPP\u230b \u7ba1\u7406\u5458{nickname}\u8bd5\u56fe\u4fee\u6539\u4e0d\u5b58\u5728\u7684\u8d44\u6e90", extra={"event": "\u8d44\u6e90\u4fee\u6539"}\r\n        )\r\n        return {"success": True, "message": "12"}\r\n    elif result != -1:\r\n        adapter_logger.error(\r\n            f"\u7ba1\u7406\u5458{nickname}\u8bd5\u56fe\u628a{originalID}\u4fee\u6539\u6210\u5df2\u7ecf\u5b58\u5728\u7684id{result}",\r\n            extra={"event": "\u8d44\u6e90\u4fee\u6539"},\r\n        )\r\n        return {"success": True, "message": "13"}\r\n    else:\r\n        adapter_logger.info(\r\n            f"\u7ba1\u7406\u5458{nickname}\u6210\u529f\u66f4\u65b0\u6570\u636e\u5e93{selectedType}:\\n{original_data}\\n{\', \'.join(filtered_new_values)}",\r\n            extra={"event": "\u8d44\u6e90\u4fee\u6539"},\r\n        )\r\n        return {"success": True, "message": "14"}\r\n\r\n\r\n@router.post("/add")\r\nasync def material_add(nickname: str, code: str, selectedType: str, request: Request):\r\n    # \u7ba1\u7406\u5458\u6dfb\u52a0\u8d44\u6e90\r\n    auth_code = await authenticate_user(nickname, code)\r\n    if auth_code != 0:\r\n        adapter_logger.error(\r\n            f"\u964c\u751f\u7528\u6237{nickname}\u8bd5\u56fe\u6dfb\u52a0\u8d44\u6e90",\r\n            extra={"event": "\u8d44\u6e90\u6dfb\u52a0"},\r\n        )\r\n        return {"success": True, "message": "15"}\r\n\r\n    if selectedType not in ["boardgames", "scriptmurders", "publications"]:\r\n        adapter_logger.error(\r\n            f"\u7ba1\u7406\u5458{nickname} \u6dfb\u52a0\u65e0\u6548\u7684\u7269\u8d44\u7c7b\u578b",\r\n            extra={"event": "\u8d44\u6e90\u6dfb\u52a0"},\r\n        )\r\n        return {"success": True, "message": "16"}\r\n\r\n    filtered_new_values = await add_materials(selectedType, request)\r\n\r\n    adapter_logger.info(\r\n        f"\u7ba1\u7406\u5458{nickname}\u6210\u529f\u6dfb\u52a0\u7269\u8d44\u5230\u6570\u636e\u5e93{selectedType}:\\n{filtered_new_values}",\r\n        extra={"event": "\u8d44\u6e90\u6dfb\u52a0"},\r\n    )\r\n\r\n    return {"success": True, "message": "17"}\r\n\r\n# from config import config, update_database, query_database\r\n\r\n\r\n# TODO qq\u5c0f\u7a0b\u5e8f\u5408\u5e76\u5230identify\u90e8\u5206\r\n# async def authenticate_user(nickname, code):\r\n#     # \u7ba1\u7406\u5458\u8eab\u4efd\u786e\u8ba4\r\n#     if nickname in config["admin_nicknames"] and code == "0":\r\n#         return 0\r\n#     elif nickname in ["One-8587", "Two-8587", "New Wave", "\u68a6\u5468\u738b\u826f\u5c06\u821e"]:\r\n#         # \u6d4b\u8bd5\u5458\u8d26\u53f7\r\n#         return 1\r\n#     # \u4ece\u6570\u636e\u5e93\u4e2d\u67e5\u627e\u7528\u6237\r\n#     user_found = await query_database(\r\n#         "SELECT * FROM user_all WHERE qq_name = :nickname", {"nickname": nickname}\r\n#     )\r\n#     if user_found and code == "1":\r\n#         return 1\r\n#     return 2\r\n#\r\n#\r\n# # \u4ec5\u4f5c\u53c2\u8003\uff0c\u5230 abandoned\r\n# async def add_users(user_list, identity):\r\n#     # \u66f4\u65b0 users_qq_nickname \u8868\uff0c\u5982\u679c qq_number \u5b58\u5728\u5219\u66f4\u65b0 nickname\u53caidentity\r\n#     for user in user_list:\r\n#         qq_number = user[0]  # user_id\r\n#         nickname = user[1]  # nickname\r\n#\r\n#         # \u67e5\u8be2\u5f53\u524d\u7528\u6237\u7684 identity\r\n#         identity_query = "SELECT identity FROM user_all WHERE qq_number = ?"\r\n#         current_identity = await query_database(identity_query, (qq_number,))\r\n#\r\n#         if current_identity:  # \u5982\u679c\u5b58\u5728\r\n#             current_identity = current_identity[0][0]\r\n#             # \u66f4\u65b0 nickname\r\n#             update_nickname_query = (\r\n#                 "UPDATE user_all SET nickname = ? WHERE qq_number = ?"\r\n#             )\r\n#             await update_database(update_nickname_query, (nickname, qq_number))\r\n#\r\n#             # \u5982\u679c identity \u4ece 1 \u6539\u4e3a 2,\u5219\u66f4\u65b0 identity\r\n#             if current_identity == 1 and identity == 2:\r\n#                 update_identity_query = (\r\n#                     "UPDATE user_all SET identity = ? WHERE qq_number = ?"\r\n#                 )\r\n#                 await update_database(update_identity_query, (2, qq_number))\r\n#         else:  # \u5982\u679c\u4e0d\u5b58\u5728\uff0c\u63d2\u5165\u65b0\u8bb0\u5f55\r\n#             insert_query = """\r\n#             INSERT INTO user_all (qq_number, nickname, identity)\r\n#             VALUES (?, ?, ?)\r\n#             """\r\n#             await update_database(insert_query, (qq_number, nickname, identity))\r\n#\r\n#\r\n# async def users_all():\r\n#     # \u5220\u9664\u8868\r\n#     await update_database("DROP TABLE IF EXISTS users_all")\r\n#\r\n#     # \u521b\u5efa\u8868\r\n#     create_table_query = """\r\n#            CREATE TABLE IF NOT EXISTS users_all (\r\n#                qq_number TEXT PRIMARY KEY,\r\n#                qq_name TEXT,\r\n#                identity TEXT,\r\n#                name TEXT,\r\n#                nickname TEXT,\r\n#                gender TEXT,\r\n#                grade TEXT,\r\n#                major TEXT,\r\n#                student_id TEXT,\r\n#                phone TEXT,\r\n#                political_status TEXT,\r\n#                hometown TEXT,\r\n#                card_number TEXT,\r\n#                id TEXT\r\n#            );\r\n#            """\r\n#     await execute_update(create_table_query)\r\n#\r\n#     # \u83b7\u53d6 users_qq_nickname \u8868\u4e2d\u7684\u6570\u636e\r\n#     users_qq_nickname_data = await execute_query(\r\n#         "SELECT qq_number, nickname, identity FROM users_qq_nickname"\r\n#     )\r\n#\r\n#     # \u63d2\u5165\u5408\u5e76\u6570\u636e\r\n#     for qq_number, qq_name, identity in users_qq_nickname_data:\r\n#         # \u67e5\u8be2\u5bf9\u5e94\u7684 users_info \u6570\u636e\r\n#         users_info_query = """\r\n#                SELECT \u59d3\u540d, \u4ee3\u53f7, \u6027\u522b, \u5e74\u7ea7, \u4e13\u4e1a, \u5b66\u53f7, \u7535\u8bdd, \u653f\u6cbb\u9762\u8c8c, \u7c4d\u8d2f, \u5361\u53f7, id\r\n#                FROM users_info\r\n#                WHERE qq = ?\r\n#                """\r\n#         users_info_data = await execute_query(users_info_query, (qq_number,))\r\n#\r\n#         # \u9ed8\u8ba4\u5c06\u5404\u5b57\u6bb5\u8bbe\u4e3a None\uff0c\u8868\u793a\u7f3a\u5931\r\n#         name = nickname = gender = grade = major = student_id = phone = (\r\n#             political_status\r\n#         ) = hometown = card_number = user_id = None\r\n#\r\n#         # \u5982\u679c\u627e\u5230\u5bf9\u5e94\u7684 users_info \u6570\u636e\uff0c\u5219\u66f4\u65b0\u5404\u5b57\u6bb5\r\n#         if users_info_data:\r\n#             (\r\n#                 name,\r\n#                 nickname,\r\n#                 gender,\r\n#                 grade,\r\n#                 major,\r\n#                 student_id,\r\n#                 phone,\r\n#                 political_status,\r\n#                 hometown,\r\n#                 card_number,\r\n#                 user_id,\r\n#             ) = users_info_data[0]\r\n#\r\n#         # \u63d2\u5165\u5230 users_all \u8868\r\n#         insert_query = """\r\n#                        INSERT INTO users_all (\r\n#                            qq_number, qq_name, identity, name, nickname, gender, grade,\r\n#                            major, student_id, phone, political_status, hometown, card_number, id\r\n#                        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\r\n#                        """\r\n#         await execute_update(\r\n#             insert_query,\r\n#             (\r\n#                 qq_number,\r\n#                 qq_name,\r\n#                 identity,\r\n#                 name,\r\n#                 nickname,\r\n#                 gender,\r\n#                 grade,\r\n#                 major,\r\n#                 student_id,\r\n#                 phone,\r\n#                 political_status,\r\n#                 hometown,\r\n#                 card_number,\r\n#                 user_id,\r\n#             ),\r\n#         )\n'})})]}),"\n",(0,a.jsx)(e.h2,{id:"botpy",children:"botpy"}),"\n",(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:"botpy \u903b\u8f91"}),(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:'"""botpy \u65e7\u903b\u8f91\uff0c\u4f7f\u7528\u9700\u5b89\u88c5 botpy"""\r\n# \u628a\u8fd9\u4e24\u4e2a\u51fd\u6570\u5728botpy/api.py\u7684\u6700\u4e0b\u9762\uff0c\u4fee\u6539\u540e\u53ef\u4e0a\u4f20\u672c\u5730\u6587\u4ef6\r\nasync def post_group_file(\r\n    self,\r\n    group_openid: str,\r\n    file_type: int,\r\n    url: str,\r\n    srv_send_msg: bool = False,\r\n) -> message.Media:\r\n    if os.path.isfile(url):  # \u68c0\u67e5\u662f\u5426\u4e3a\u672c\u5730\u6587\u4ef6\u8def\u5f84\r\n        # \u8bfb\u53d6\u672c\u5730\u6587\u4ef6\u5e76\u7f16\u7801\u4e3a base64\r\n        with open(url, "rb") as f:\r\n            file_data = base64.b64encode(f.read()).decode("utf-8")\r\n    else:  # \u5047\u8bbe\u4f20\u5165\u7684\u662f URL\r\n        response = requests.get(url)\r\n        if response.status_code == 200:\r\n            file_data = base64.b64encode(response.content).decode("utf-8")\r\n        else:\r\n            print(f"\u4e0b\u8f7d\u6587\u4ef6\u5931\u8d25\uff0c\u72b6\u6001\u7801: {response.status_code}")\r\n    payload = {\r\n        "group_openid": group_openid,\r\n        "file_type": file_type,\r\n        "file_data": file_data,  # \u4f7f\u7528 base64 \u7f16\u7801\u7684\u6587\u4ef6\u6570\u636e\r\n        "srv_send_msg": srv_send_msg,\r\n    }\r\n    route = Route("POST", "/v2/groups/{group_openid}/files", group_openid=group_openid)\r\n    return await self._http.request(route, json=payload)\r\n\r\n\r\nasync def post_c2c_file(\r\n    self,\r\n    openid: str,\r\n    file_type: int,\r\n    url: str,\r\n    srv_send_msg: bool = False,\r\n) -> message.Media:\r\n    if os.path.isfile(url):  # \u68c0\u67e5\u662f\u5426\u4e3a\u672c\u5730\u6587\u4ef6\u8def\u5f84\r\n        # \u8bfb\u53d6\u672c\u5730\u6587\u4ef6\u5e76\u7f16\u7801\u4e3a base64\r\n        with open(url, "rb") as f:\r\n            file_data = base64.b64encode(f.read()).decode("utf-8")\r\n    else:  # \u5047\u8bbe\u4f20\u5165\u7684\u662f URL\r\n        response = requests.get(url)\r\n        if response.status_code == 200:\r\n            file_data = base64.b64encode(response.content).decode("utf-8")\r\n        else:\r\n            print(f"\u4e0b\u8f7d\u6587\u4ef6\u5931\u8d25\uff0c\u72b6\u6001\u7801: {response.status_code}")\r\n    payload = {\r\n        "openid": openid,\r\n        "file_type": file_type,\r\n        "file_data": file_data,  # \u4f7f\u7528 base64 \u7f16\u7801\u7684\u6587\u4ef6\u6570\u636e\r\n        "srv_send_msg": srv_send_msg,\r\n    }\r\n    route = Route("POST", "/v2/users/{openid}/files", openid=openid)\r\n    return await self._http.request(route, json=payload)\r\n\r\n\r\n# \u4e0b\u9762\u7684\u4e3a\u4e3b\u8981\u4ee3\u7801\uff0c\u53ef\u53c2\u8003 botpy \u7684 pythonsdk \u4e2d\u7684\u5305\u5f15\u5165\r\nimport re\r\nimport botpy\r\nfrom botpy.message import C2CMessage, GroupMessage\r\nfrom log import loggers\r\nfrom config import config\r\nfrom message.handler.msg import Msg\r\n\r\nadapter_logger = loggers["adapter"]\r\nglobal_api = {}  # \u7528\u4e8e\u5b58\u50a8 message.api\r\n\r\n\r\ndef set_global_api(api):\r\n    # \u8bbe\u7f6ebotpy\u7684\u5168\u5c40api\r\n    global global_api\r\n    if "api" not in global_api:  # \u53ea\u5728\u7b2c\u4e00\u6b21\u8d4b\u503c\r\n        global_api["api"] = api\r\n\r\n\r\nclass MyClient(botpy.Client):\r\n    #  \u5b98\u65b9QQ\u673a\u5668\u4eba\u5ba2\u6237\u7aef\u7c7b\r\n    async def on_ready(self):\r\n        adapter_logger.debug(f"\u2308LR232\u230b \u542f\u52a8\u6210\u529f", extra={"event": "\u8fd0\u884c\u65e5\u5fd7"})\r\n\r\n    @staticmethod\r\n    async def on_c2c_message_create(message: C2CMessage):\r\n        adapter_logger.debug(f"\u2308LR232\u230b \u63a5\u6536:{message}", extra={"event": "\u6d88\u606f\u63a5\u6536"})\r\n        set_global_api(message._api)\r\n        message.content = await msg_content_join(message.content)\r\n        files = {}\r\n        if message.attachments:\r\n            for attachment in message.attachments:\r\n                file_name = attachment.get("filename")\r\n                file_url = attachment.get("url")\r\n                if file_name and file_url:\r\n                    files.append((file_name, file_url))\r\n            Msg(\r\n                robot="LR232",\r\n                kind="\u79c1\u804a\u6587\u4ef6\u6d88\u606f" if message.content else "\u79c1\u804a\u56fe\u6587\u6d88\u606f",\r\n                event="\u5904\u7406",\r\n                source=message.author.user_openid,\r\n                seq=message.id,\r\n                content=message.content,\r\n                files=files,\r\n            )\r\n        else:\r\n            Msg(\r\n                robot="LR232",\r\n                kind="\u79c1\u804a\u6587\u5b57\u6d88\u606f",\r\n                event="\u5904\u7406",\r\n                source=message.author.user_openid,\r\n                seq=message.id,\r\n                content=message.content,\r\n                files=files,\r\n            )\r\n\r\n    @staticmethod\r\n    async def on_group_at_message_create(message: GroupMessage):\r\n        adapter_logger.debug(f"\u2308LR232\u230b \u63a5\u6536:{message}", extra={"event": "\u6d88\u606f\u63a5\u6536"})\r\n        set_global_api(message._api)\r\n        message.content = await msg_content_join(message.content)\r\n        files = {}\r\n        if message.attachments:\r\n            for attachment in message.attachments:\r\n                file_name = attachment.get("filename")\r\n                file_url = attachment.get("url")\r\n                if file_name and file_url:\r\n                    files.append((file_name, file_url))\r\n            Msg(\r\n                robot="LR232",\r\n                kind="\u79c1\u804a\u6587\u4ef6\u6d88\u606f" if message.content else "\u79c1\u804a\u56fe\u6587\u6d88\u606f",\r\n                event="\u5904\u7406",\r\n                source=message.author.member_openid,\r\n                seq=message.id,\r\n                content=message.content,\r\n                files=files,\r\n                group=message.group_openid,\r\n            )\r\n        else:\r\n            Msg(\r\n                robot="LR232",\r\n                kind="\u79c1\u804a\u6587\u5b57\u6d88\u606f",\r\n                event="\u5904\u7406",\r\n                source=message.author.member_openid,\r\n                seq=message.id,\r\n                content=message.content,\r\n                files=files,\r\n                group=message.group_openid,\r\n            )\r\n\r\n\r\nasync def msg_content_join(content):\r\n    # \u8f6c\u6362\u5185\u5bb9\u4e2d\u7684\u8868\u60c5\u5305\r\n    content = content.strip()\r\n    pattern = r"<faceType=(\\d+),faceId=\\"(\\d*)\\".*?>"\r\n\r\n    def replace_face(match):\r\n        face_type = int(match.group(1))  # \u83b7\u53d6 faceType\r\n\r\n        if face_type == 1:\r\n            face_id = int(match.group(2))  # \u83b7\u53d6 faceId\r\n            emoji_name = config["emojis"].get(face_id, "\u672a\u77e5\u8868\u60c5")\r\n            return f"[{emoji_name}]"\r\n        elif face_type == 4:\r\n            return "[\u52a8\u753b\u8868\u60c5]"\r\n        else:\r\n            return match.group(0)  # \u4fdd\u7559\u539f\u5185\u5bb9\uff0c\u9002\u7528\u4e8e\u5176\u4ed6\u60c5\u51b5\r\n\r\n    # \u66ff\u6362\u6240\u6709\u5339\u914d\u9879\r\n    return re.sub(pattern, replace_face, content)\r\n\r\n\r\nasync def LR232_start():\r\n    intents = botpy.Intents(public_messages=True)\r\n    client = MyClient(intents=intents)\r\n    await client.start(appid=config["appid"], secret=config["secret"])\r\n\r\n\r\n# \u4ee5\u4e0b\u662f\u9700\u8981\u5e76\u5165 msg_send \u7684 botpy \u53d1\u9001\u903b\u8f91\r\nasync def msg_send(msg: Msg):\r\n    if msg.robot == "LR232":\r\n        if msg.group:\r\n            # \u53d1\u9001\u7fa4\u6d88\u606f\r\n            message_instance = GroupMessage(global_api.get("api"), "", {})\r\n            uploadMedia = ""\r\n            if msg.files:\r\n                # \u8c03\u7528\u4e0a\u4f20\u51fd\u6570\uff0c\u4f20\u5165 base64 \u7f16\u7801\u7684\u6587\u4ef6\u5185\u5bb9\r\n                uploadMedia = await message_instance.api.post_group_file(\r\n                    group_openid=msg.group,\r\n                    file_type=1,  # \u56fe\u7247\u7c7b\u578b\r\n                    url=msg.files[0][1],  # \u4f20\u5165 base64 \u7f16\u7801\u540e\u7684\u6587\u4ef6\u5185\u5bb9\r\n                )\r\n            await message_instance.api.post_group_message(\r\n                group_openid=msg.group,\r\n                msg_type=7 if uploadMedia else 0,\r\n                content=msg.content,\r\n                media=uploadMedia if uploadMedia else None,\r\n                msg_id=msg.seq,\r\n            )\r\n            # \u8bb0\u5f55\u6d88\u606f\r\n            if msg.files:\r\n                msg.content = f"{msg.content}|{msg.files[0][1]}"\r\n            adapter_logger.debug(\r\n                f"\u2308LR232\u230b \u53d1\u9001:\u6587\u4ef6{msg.content}", extra={"event": "\u6d88\u606f\u53d1\u9001"}\r\n            )\r\n        else:\r\n            # \u53d1\u9001\u597d\u53cb\u6d88\u606f\r\n            message_instance = C2CMessage(global_api.get("api"), "", {})\r\n            uploadMedia = ""\r\n            if msg.files:\r\n                # \u8c03\u7528\u4e0a\u4f20\u51fd\u6570\uff0c\u4f20\u5165 base64 \u7f16\u7801\u7684\u6587\u4ef6\u5185\u5bb9\r\n                uploadMedia = await message_instance.api.post_c2c_file(\r\n                    openid=msg.source,\r\n                    file_type=4,  # \u56fe\u7247\u7c7b\u578b\r\n                    url=msg.files[0][1],  # \u4f20\u5165 base64 \u7f16\u7801\u540e\u7684\u6587\u4ef6\u5185\u5bb9\r\n                )\r\n            await message_instance.api.post_c2c_message(\r\n                openid=msg.group,\r\n                msg_type=7 if uploadMedia else 0,\r\n                content=msg.content,\r\n                media=uploadMedia if uploadMedia else None,\r\n                msg_id=msg.seq,\r\n            )\r\n            if msg.files:\r\n                msg.content = f"{msg.content}|{msg.files[0][0]}"\r\n            adapter_logger.debug(\r\n                f"\u2308LR232\u230b \u53d1\u9001:\u6587\u4ef6{msg.content}", extra={"event": "\u6d88\u606f\u53d1\u9001"}\r\n            )\n'})})]}),"\n",(0,a.jsx)(e.h2,{id:"weibo",children:"weibo"}),"\n",(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:"weibo \u903b\u8f91"}),(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:'"""\u5fae\u535a\u7c89\u4e1d\u670d\u52a1\u5e73\u53f0\u6d88\u606f\u63a5\u6536/\u53d1\u9001"""\r\nimport json\r\nimport time\r\nimport hashlib\r\nimport requests\r\nfrom fastapi import APIRouter, Response, Request\r\nfrom config import config,loggers\r\n\r\n# \u4ee5\u4e0b\u4e3a\u63a5\u6536\r\nrouter = APIRouter()\r\nadapter_logger = loggers["adapter"]\r\n\r\n\r\n@router.get("/")\r\ndef set_callback(signature: str, timestamp: str, nonce: str, echostr: str):\r\n    """\u56de\u8c03\u5730\u5740\u9a8c\u8bc1"""\r\n    try:\r\n        token = config["WEIBO_SECRET"]\r\n        list = [token, timestamp, nonce]\r\n        list.sort()\r\n        sha1 = hashlib.sha1()  # \u8ba1\u7b97SHA1\u54c8\u5e0c\u503c\r\n        for item in list:\r\n            sha1.update(item.encode("utf-8"))\r\n        hashcode = sha1.hexdigest()\r\n\r\n        if hashcode == signature:  # \u6bd4\u5bf9signature\u4e0e\u8ba1\u7b97\u51fa\u7684hashcode\r\n            adapter_logger.debug(\r\n                f"\u2308WEIBO\u230b \u6d88\u606f\u56de\u8c03\u914d\u7f6e\u6210\u529f", extra={"event": "\u56de\u8c03\u914d\u7f6e"}\r\n            )\r\n            return Response(content=echostr, media_type="text/plain")\r\n        else:\r\n            raise Exception(\r\n                f"\u56de\u8c03\u914d\u7f6e\u9519\u8bef | \u6570\u636e\u4e0d\u5b8c\u6574: signature-{signature} timestamp-{timestamp} nonce-{nonce} echostr-{echostr}"\r\n            )\r\n\r\n    except Exception as e:\r\n        raise Exception(f"\u56de\u8c03\u914d\u7f6e\u9519\u8bef | \u9519\u8bef: {e}")\r\n\r\n\r\n@router.post("/")\r\nasync def handle_post(request: Request):\r\n    print(request.body())\r\n\r\n# \u4ee5\u4e0b\u4e3a\u53d1\u9001\r\n# \u8bf7\u6c42\u7684\u57fa\u7840\u4fe1\u606f\r\nAPP_KEY = ""  # \u66ff\u6362\u4e3a\u4f60\u7684 APP ID\r\nAPP_SECRET = ""  # \u66ff\u6362\u4e3a\u4f60\u7684 Token\r\n\r\n\r\n\r\ndef get_token():\r\n    # \u8bf7\u6c42\u5934\r\n    headers = {\r\n        "client_id": APP_KEY,\r\n        "client_secret": APP_SECRET,\r\n        "grant_type": "authorization_code",\r\n        "code": code,\r\n        "redirect_uri": uri,  # \u53ef\u4ee5\u4f7f\u7528\u968f\u673a\u751f\u6210\u7684 UUID\r\n    }\r\n\r\n    # \u53d1\u9001 POST \u8bf7\u6c42\r\n    response = requests.post("https://api.weibo.com/oauth2/access_token", data=headers)\r\n\r\n    # \u6253\u5370\u7ed3\u679c\r\n    print(f"Status Code: {response.status_code}")\r\n    print(f"Response Body: {response.json()}")\r\n\r\n\r\ndef get_weibo():\r\n    # \u8bf7\u6c42\u5934\r\n    headers = {"access_token": access_token, "screen_name": "whu\u63a8\u534f"}\r\n\r\n    # \u53d1\u9001 POST \u8bf7\u6c42\r\n    response = session.get(\r\n        "https://api.weibo.com/2/friendships/friends.json", params=headers\r\n    )\r\n\r\n    # \u6253\u5370\u7ed3\u679c\r\n    print(f"Status Code: {response.status_code}")\r\n    print(f"Response Body: {response.json()}")\r\n\r\n\r\ndef get_mentions():\r\n    # \u8bf7\u6c42\u5934\r\n    headers = {"access_token": access_token}\r\n\r\n    # \u53d1\u9001 POST \u8bf7\u6c42\r\n    response = session.get(\r\n        "https://api.weibo.com/2/statuses/mentions.json", params=headers\r\n    )\r\n\r\n    # \u6253\u5370\u7ed3\u679c\r\n    print(f"Status Code: {response.status_code}")\r\n    print(f"Response Body: {response.json()}")\r\n\r\n\r\nget_mentions()\n'})})]}),"\n",(0,a.jsx)(e.h2,{id:"wechatopen",children:"wechatopen"}),"\n",(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:"\u5fae\u4fe1\u5f00\u653e\u5e73\u53f0\u903b\u8f91"}),(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:'"""\u5fae\u4fe1\u5f00\u653e\u5e73\u53f0\u6d4b\u8bd5\u4ee3\u7801"""\r\nimport hashlib\r\nimport time\r\nimport requests\r\nimport json\r\n\r\n# \u8bf7\u6c42\u7684\u57fa\u7840\u4fe1\u606f\r\nAPP_ID = ""  # \u66ff\u6362\u4e3a\u4f60\u7684 APP ID\r\nTOKEN = ""  # \u66ff\u6362\u4e3a\u4f60\u7684 Token\r\nACCOUNT = ""  # \u66ff\u6362\u4e3a\u4f60\u7684\u8d26\u6237\r\nkey = ""\r\naccess_token = ""\r\ntask_id1 = ""\r\n\r\n\r\ndef generate_sign(token, timestamp, nonce, body):\r\n    """\r\n    \u6839\u636e\u6587\u6863\u751f\u6210\u7b7e\u540d sign = md5(Token + str(unix_timestamp) + nonce + md5(body))\r\n    """\r\n    body_md5 = hashlib.md5(body.encode("utf-8")).hexdigest()\r\n    sign_str = f"{token}{timestamp}{nonce}{body_md5}"\r\n    sign = hashlib.md5(sign_str.encode("utf-8")).hexdigest()\r\n    return sign\r\n\r\n\r\ndef send_request():\r\n    # \u65f6\u95f4\u6233\u548c\u968f\u673a\u5b57\u7b26\u4e32\r\n    timestamp = int(time.time())\r\n    nonce = "abc"  # \u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528\u66f4\u590d\u6742\u7684\u968f\u673a\u5b57\u7b26\u4e32\r\n    url = "https://openaiapi.weixin.qq.com/v2/token"\r\n\r\n    # \u8bf7\u6c42\u4f53\r\n    body = json.dumps({"account": ACCOUNT})\r\n\r\n    # \u751f\u6210\u7b7e\u540d\r\n    sign = generate_sign(TOKEN, timestamp, nonce, body)\r\n\r\n    # \u8bf7\u6c42\u5934\r\n    headers = {\r\n        "X-APPID": APP_ID,\r\n        "request_id": "",  # \u53ef\u4ee5\u4f7f\u7528\u968f\u673a\u751f\u6210\u7684 UUID\r\n        "timestamp": str(timestamp),\r\n        "nonce": nonce,\r\n        "sign": sign,\r\n        "content-type": "application/json",\r\n    }\r\n\r\n    # \u53d1\u9001 POST \u8bf7\u6c42\r\n    response = requests.post(url, headers=headers, data=body)\r\n\r\n    # \u6253\u5370\u7ed3\u679c\r\n    print(f"Status Code: {response.status_code}")\r\n    print(f"Response Body: {response.json()}")\r\n\r\n\r\ndef import_simple_qna():\r\n    # \u65f6\u95f4\u6233\u548c\u968f\u673a\u5b57\u7b26\u4e32\r\n    timestamp = int(time.time())\r\n    nonce = "abc"  # \u8fd9\u91cc\u53ef\u4ee5\u7528\u968f\u673a\u751f\u6210\u7684\u5b57\u7b26\u4e32\r\n    url = "https://openaiapi.weixin.qq.com/v2/bot/import/json"\r\n\r\n    # \u8bf7\u6c42\u4f53\r\n    body = json.dumps(\r\n        {\r\n            "mode": 0,\r\n            "data": [\r\n                {\r\n                    "skill": "AAA",\r\n                    "intent": "BBC",\r\n                    "threshold": "0.9",\r\n                    "disable": False,\r\n                    "questions": ["q", "q2"],\r\n                    "answers": ["a"],\r\n                }\r\n            ],\r\n        }\r\n    )\r\n\r\n    # \u751f\u6210\u7b7e\u540d\r\n    sign = generate_sign(TOKEN, timestamp, nonce, body)\r\n\r\n    # \u8bf7\u6c42\u5934\r\n    headers = {\r\n        "content-type": "application/json",\r\n        "X-OPENAI-TOKEN": access_token,\r\n        "request_id": ACCOUNT,\r\n        "timestamp": str(timestamp),\r\n        "nonce": nonce,\r\n        "sign": sign,\r\n    }\r\n\r\n    # \u53d1\u9001 POST \u8bf7\u6c42\r\n    response = requests.post(url, headers=headers, data=body)\r\n\r\n    # \u6253\u5370\u54cd\u5e94\u7ed3\u679c\r\n    if response.status_code == 200:\r\n        print("\u5bfc\u5165\u6210\u529f\uff01\u8fd4\u56de\u6570\u636e\uff1a")\r\n        print(response.json())\r\n    else:\r\n        print(f"\u5bfc\u5165\u5931\u8d25\uff0c\u72b6\u6001\u7801\uff1a{response.status_code}")\r\n        print(response.text)\r\n\r\n\r\ndef query_qna(task_id):\r\n    timestamp = int(time.time())\r\n    nonce = "abc"  # \u8fd9\u91cc\u53ef\u4ee5\u7528\u968f\u673a\u751f\u6210\u7684\u5b57\u7b26\u4e32\r\n    url = "https://openaiapi.weixin.qq.com/v2/async/fetch"\r\n\r\n    # \u8bf7\u6c42\u4f53\r\n    body = json.dumps({"task_id": task_id})\r\n\r\n    # \u751f\u6210\u7b7e\u540d\r\n    sign = generate_sign(TOKEN, timestamp, nonce, body)\r\n\r\n\r\nif __name__ == "__main__":\r\n    send_request()\r\n    # import_simple_qna()\n'})})]}),"\n",(0,a.jsx)(e.h2,{id:"llonebot",children:"LLOneBot"}),"\n",(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:"LLOneBot \u539f\u4ee3\u7801\u903b\u8f91"}),(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:'import re\r\nimport os\r\nimport json\r\nimport asyncio\r\nimport traceback\r\nimport websockets\r\nfrom datetime import datetime\r\nfrom zoneinfo import ZoneInfo\r\nfrom lrobot.config import config\r\nfrom lrobot.log import robot_log\r\nfrom lrobot.database import add_users, activities_edit\r\nfrom lrobot.event.point import get_speakers, task_queue\r\nfrom lrobot.msg import Msg, msg_log, msg_add, global_ws, set_global_ws\r\n\r\n\r\nasync def LR5921_start():\r\n    websocket_url = "ws://localhost:5921"  # LLOneBot\u8fde\u63a5\u7aef\u53e3\r\n    try:\r\n        async with websockets.connect(websocket_url) as ws:\r\n            set_global_ws(ws)  # \u5168\u5c40\u5171\u4eabws\u8fde\u63a5\r\n            await on_open()\r\n            await on_message()  # WebSocket \u6d88\u606f\u63a5\u6536\u548c\u5904\u7406\r\n    except Exception:\r\n        error_message = traceback.format_exc()\r\n        log_event(\r\n            "LRobot", "\u7cfb\u7edf\u672a\u77e5\u9519\u8bef", f"WebSocket connection error: {error_message}"\r\n        )\r\n\r\n\r\nasync def on_open():\r\n    log_event("LR5921", "\u673a\u5668\u542f\u52a8", "\u542f\u52a8\u6210\u529f")\r\n    asyncio.create_task(get_speakers())  # \u6bcf\u65e5\u53d1\u8a00\u903b\u8f91\r\n\r\n\r\nasync def on_message():\r\n    try:\r\n        async for message in global_ws.get("ws"):\r\n            data = json.loads(message)\r\n            if "status" in data and data["status"] == "ok":\r\n                await echo_deal(data)\r\n            elif "post_type" in data:  # \u6536\u5230 WS \u4e8b\u4ef6\r\n                if data.get("post_type") == "message":  # \u6d88\u606f\u4e8b\u4ef6\r\n                    await message_deal(data)\r\n                elif data.get("post_type") == "notice":  # \u901a\u77e5\u4e8b\u4ef6\r\n                    log_event("LR5921", "\u901a\u77e5\u4e8b\u4ef6\u8c03\u8bd5", data)\r\n                    is_group_recall = (\r\n                        data.get("notice_type") == "group_recall"\r\n                        and str(data.get("group_id")) == config["\u6d4b\u8bd5\u7fa4"]\r\n                    )  # \u7fa4\u804a\u64a4\u56de\r\n                    is_friend_recall = (\r\n                        data.get("notice_type") == "friend_recall"\r\n                    )  # \u79c1\u804a\u64a4\u56de\r\n                    is_poked = data.get("sub_type") == "poke" and str(\r\n                        data.get("target_id")\r\n                    ) in [\r\n                        config["LR5921"],\r\n                        config["LR232"],\r\n                    ]  # \u6233\u6233\r\n                    is_liked = (\r\n                        data.get("notice_type") == "group_msg_emoji_like"\r\n                    )  # \u7fa4\u6d88\u606f\u88ab\u8868\u6001\r\n                    if is_group_recall or is_friend_recall:\r\n                        await revoke(data)\r\n                    elif is_poked:\r\n                        await get_poke(data)\r\n                    elif is_liked:\r\n                        await get_like(data)\r\n            #  \u4e0d\u5904\u7406\u8bf7\u6c42\u4e8b\u4ef6\u548c\u5143\u4e8b\u4ef6\r\n            else:\r\n                # WS\u8fd4\u56defailed\r\n                log_event("LR5921", "WS\u56de\u5e94\u8c03\u8bd5", data)\r\n    except Exception:\r\n        error_message = traceback.format_exc()\r\n        log_event(\r\n            "LRobot", "\u7cfb\u7edf\u672a\u77e5\u9519\u8bef", f"WebSocket massage_deal error: {error_message}"\r\n        )\r\n\r\n\r\nasync def echo_deal(data):\r\n    # \u5904\u7406 WS \u56de\u5e94\u7684\u6d88\u606f\uff0cecho\u4e3a\u9644\u5c5e\u4fe1\u606f\u5b57\u6bb5\uff0c\u6536\u53d1\u4e00\u81f4\r\n    log_event("LR5921", "WS\u56de\u5e94\u8c03\u8bd5", data)\r\n    echo = data.get("echo", "")\r\n    data = data.get("data")\r\n    if echo.startswith("msg_send"):\r\n        await echo_msg_send(echo, data)\r\n    elif echo.startswith("msg_get"):\r\n        await echo_msg_get(echo, data)\r\n    elif echo.startswith("get_like"):\r\n        await echo_get_like(echo, data)\r\n    elif echo.startswith("revoke"):\r\n        await echo_revoke(data)\r\n    elif echo.startswith("flush_speak"):\r\n        await echo_flush_speak(data)\r\n    elif echo.startswith("get_speak"):\r\n        await echo_get_speak(data)\r\n    elif echo.startswith("get_talkative"):\r\n        await echo_get_talkative(data)\r\n    elif echo.startswith("get_users"):\r\n        await echo_get_users(data)\r\n    elif echo.startswith("get_file"):\r\n        await echo_get_file(echo, data)\r\n    elif echo.startswith("add_activities"):\r\n        await echo_add_activities(echo, data)\r\n    elif echo.startswith("add_activity_group"):\r\n        await echo_add_activity_group(echo, data)\r\n    else:\r\n        log_event("LRobot", "\u7cfb\u7edf\u672a\u77e5\u9519\u8bef", f"\u672a\u77e5\u7684WS\u56de\u5e94{echo}|{data}")\r\n\r\n\r\nasync def message_deal(data):\r\n    # \u6d88\u606f\u5904\u7406\r\n    msg_content = data.get("message")  # \u539f\u59cb\u6d88\u606f\u6bb5\u683c\u5f0f\uff08\u6570\u7ec4\uff09\r\n    log_event("LR5921", "\u6d88\u606f\u63a5\u6536\u8c03\u8bd5", msg_content)\r\n    content, info, name, url, at = await segment_join(msg_content)\r\n    if not content and not name:  # \u4e0d\u5904\u7406\u7a7a\u683c\u6d88\u606f\r\n        return\r\n\r\n    if data.get("message_type") == "private":  # \u79c1\u804a\u6d88\u606f\r\n        if info:\r\n            kind = 13  # \u597d\u53cb\u56de\u590d\r\n        else:\r\n            if content:\r\n                if name:\r\n                    kind = 11\r\n                else:\r\n                    kind = 10\r\n            else:\r\n                kind = 12\r\n    else:  # \u7fa4\u804a\u6d88\u606f\r\n        if info:\r\n            if at == 1:\r\n                kind = 33  # \u914d\u5bf9\u6d88\u606f\r\n            elif at == 2:\r\n                kind = 23  # \u7fa4\u804a\u56de\u590d\r\n            else:\r\n                content = "[\u56de\u590d\u6d88\u606f]" + content\r\n                kind = 34\r\n        else:\r\n            if at == 1:\r\n                kind = 33  # \u914d\u5bf9\u6d88\u606f\r\n            elif at == 2:\r\n                if content:\r\n                    if name:\r\n                        kind = 11\r\n                    else:\r\n                        kind = 10\r\n                else:\r\n                    kind = 12\r\n            else:\r\n                kind = 34\r\n\r\n    # # \u5185\u9601\u7ba1\u5bb6\u7279\u6b8a\u5904\u7406\uff0c\u4e0d\u7528@\u5feb\u6377\u4f7f\u7528\u6307\u4ee4\r\n    # keywords = ["\u8bb0\uff1a", "\u7b49\uff1a", "\u50ac\uff1a", "\u793a\uff1a", "\u5220\uff1a"]\r\n    # if kind == 12 and str(data.get(\'group_id\')) == config["\u5185\u9601"] and any(keyword in content for keyword in keywords):\r\n    #     kind = 2\r\n\r\n    msg = Msg(\r\n        robot="LR5921",\r\n        content=content,\r\n        kind=kind,\r\n        info=info,\r\n        file_name=name,\r\n        file_url=url,\r\n        group=None if data.get("message_type") == "private" else data.get("group_id"),\r\n        qq=data.get("user_id"),\r\n        seq=data.get("message_id"),\r\n    )\r\n    await msg_add(msg)\r\n\r\n\r\nasync def segment_join(content):\r\n    content_parts = []\r\n    # \u652f\u6301\u8bc6\u522b\u8868\u60c5\u6df7\u5408\u6587\u5b57\u3001\u56fe\u7247\u6df7\u5408\u6587\u5b57\u3001\u8bed\u97f3\u3001\u89c6\u9891\u3001\u6587\u4ef6\u3001\u63b7\u9ab0\u5b50\u3001\u731c\u62f3\u3001\u5408\u5e76\u8f6c\u53d1\r\n    # \u76ee\u524d\u63a8\u8350\u597d\u53cb\u3001\u7fa4\u804a\u3001\u4f4d\u7f6e\u5206\u4eab\u3001\u94fe\u63a5\u5206\u4eab\u3001\u97f3\u4e50\u5206\u4eab\u90fd\u662fjson\u683c\u5f0f\uff0c\u89c6\u9891\u662f\u6587\u4ef6\u683c\u5f0f\r\n    info_updated = False  # \u53ea\u8bc6\u522b\u7b2c\u4e00\u4e2a\u6587\u4ef6\r\n    info = ""\r\n    name = ""\r\n    url = ""\r\n    at = 0\r\n    for item in content:\r\n        msg_type = item.get("type")\r\n        msg_data = item.get("data", {})\r\n        if msg_type == "text":\r\n            content_parts.append(msg_data.get("text", ""))\r\n        elif msg_type == "face":\r\n            face_id = msg_data.get("id")\r\n            face_id = config["emojis"].get(int(face_id), "\u672a\u77e5\u8868\u60c5")\r\n            content_parts.append(f"[{face_id}]")\r\n        elif msg_type == "mface":\r\n            face_id = msg_data.get("summary")\r\n            content_parts.append(face_id)\r\n        elif msg_type == "rps":\r\n            rps_id = msg_data.get("result")\r\n            rps_mapping = {"1": "\u5e03", "2": "\u526a\u5200", "3": "\u77f3\u5934"}\r\n            rps_result = rps_mapping.get(\r\n                rps_id, "\u672a\u77e5\u7ed3\u679c"\r\n            )  # \u9ed8\u8ba4\u503c\u4e3a\'\u672a\u77e5\u7ed3\u679c\'\uff0c\u5982\u679crps_id\u4e0d\u5728\u6620\u5c04\u4e2d\r\n            content_parts.append(f"[\u731c\u62f3:{rps_result}]")\r\n        elif msg_type == "dice":\r\n            dice_id = msg_data.get("result")\r\n            content_parts.append(f"[\u63b7\u9ab0\u5b50{dice_id}\u70b9]")\r\n        elif msg_type == "forward":\r\n            content_parts.append(f"[\u5408\u5e76\u8f6c\u53d1\u6d88\u606f]")\r\n        elif msg_type == "node":\r\n            content_parts.append(f"[\u5408\u5e76\u8f6c\u53d1\u8282\u70b9]")\r\n        elif msg_type == "image" and not info_updated:\r\n            name = msg_data.get("file")\r\n            url = msg_data.get("url")\r\n        elif msg_type == "record" and not info_updated:\r\n            name = msg_data.get("file")\r\n            url = msg_data.get("url")\r\n        elif msg_type == "file" and not info_updated:\r\n            name = msg_data.get("file")\r\n            # \u6b64\u5904\u662f\u672a\u4e0b\u8f7d\u7684msg_id\r\n            url = msg_data.get("file_id")\r\n        elif msg_type == "reply":\r\n            # \u56de\u590d\u7684\u6d88\u606f\r\n            info = msg_data.get("id")\r\n        elif msg_type == "at":\r\n            qq = msg_data.get("qq")\r\n            if qq == config["LR232"]:\r\n                at = 1\r\n            elif qq == config["LR5921"] and at != 1:\r\n                at = 2\r\n            else:\r\n                user = msg_data.get("name")\r\n                content_parts.append(f"[@{user}]")\r\n        else:\r\n            log_event("LRobot", "\u7cfb\u7edf\u672a\u77e5\u9519\u8bef", f"\u6536\u5230\u65e0\u6cd5\u89e3\u6790\u7684\u6d88\u606f\uff1a{item}")\r\n    content_join = "".join(content_parts)\r\n    return content_join, info, name, url, at\r\n\r\n\r\nasync def array_join(content):\r\n    # \u83b7\u53d6\u53d1\u9001\u7684\u6d88\u606f\u3001\u64a4\u56de\u7684\u6d88\u606f\u3001\u56de\u5e94\u7684\u6d88\u606f\uff08get_file\u7684\u6570\u7ec4\u683c\u5f0f)\r\n    # \u4f7f\u7528re.split\u5c06\u5185\u5bb9\u6309[CQ:...]\u683c\u5f0f\u5207\u5206\r\n    items = re.split(r"(\\[CQ:.*?\\])", content)\r\n    content_parts = []\r\n\r\n    for item in items:\r\n        if not item:  # \u8df3\u8fc7\u7a7a\u5b57\u7b26\u4e32\r\n            continue\r\n        if item.startswith("[CQ:"):\r\n            if "CQ:text" in item:\r\n                match = re.search(r"text=([^]]+)]", content)\r\n                content_parts.append(match.group(1))\r\n            elif "CQ:face" in item:\r\n                match = re.search(r"id=([^]]+)]", content)\r\n                face_id = config["emojis"].get(int(match.group(1)), "\u672a\u77e5\u8868\u60c5")\r\n                content_parts.append(f"[{face_id}]")\r\n            elif "CQ:mface" in item:\r\n                match = re.search(r"summary=([^,]+),", content)\r\n                content_parts.append(match.group(1))\r\n            elif "CQ:rps" in item:\r\n                match = re.search(r"result=([^]]+)]", content)\r\n                rps_mapping = {"1": "\u5e03", "2": "\u526a\u5200", "3": "\u77f3\u5934"}\r\n                rps_result = rps_mapping.get(match.group(1), "\u672a\u77e5\u7ed3\u679c")\r\n                content_parts.append(f"[\u731c\u62f3:{rps_result}]")\r\n            elif "CQ:mface" in item:\r\n                match = re.search(r"result=([^]]+)]", content)\r\n                content_parts.append(f"[\u63b7\u9ab0\u5b50{match.group(1)}\u70b9]")\r\n            elif "CQ:forward" in item:\r\n                content_parts.append(f"[\u5408\u5e76\u8f6c\u53d1\u6d88\u606f]")\r\n            elif "CQ:node" in item:\r\n                content_parts.append(f"[\u5408\u5e76\u8f6c\u53d1\u8282\u70b9]")\r\n            elif "CQ:image" in item:\r\n                match = re.search(r"file=([^,]+),", content)\r\n                content_parts.append(f"[\u56fe\u7247{match.group(1)}]")\r\n            elif "CQ:record" in item:\r\n                match = re.search(r"file=([^,]+),", content)\r\n                content_parts.append(f"[\u97f3\u9891{match.group(1)}]")\r\n            elif "CQ:file" in item:\r\n                match = re.search(r"file=([^,]+),", content)\r\n                content_parts.append(f"[\u6587\u4ef6{match.group(1)}]")\r\n            elif "CQ:reply" in item:\r\n                content_parts.append(f"[\u56de\u590d\u6d88\u606f]")\r\n            elif "CQ:at" in item:\r\n                match = re.search(r"qq=([^]]+)]", content)\r\n                content_parts.append(f"[@{match.group(1)}]")\r\n            else:\r\n                log_event("LRobot", "\u7cfb\u7edf\u672a\u77e5\u9519\u8bef", f"\u6536\u5230\u65e0\u6cd5\u89e3\u6790\u7684\u6d88\u606f\uff1a{item}")\r\n        else:\r\n            content_parts.append(item)\r\n\r\n    content_join = "".join(content_parts)\r\n    return content_join\r\n\r\n\r\nasync def revoke(data):\r\n    #  \u83b7\u53d6\u64a4\u56de\u6d88\u606f\r\n    info = {\r\n        "action": "get_msg",\r\n        "params": {\r\n            "message_id": data.get("message_id"),\r\n        },\r\n        "echo": "revoke",\r\n    }\r\n    await global_ws.get("ws").send(json.dumps(info))\r\n\r\n\r\nasync def get_poke(data):\r\n    # \u88ab\u6233\u4e86\r\n    msg = Msg(\r\n        robot="LR5921" if str(data.get("target_id")) == config["LR5921"] else "LR232",\r\n        content="\u6233\u6233",\r\n        kind=24 if data.get("group_id") else 14,\r\n        group=data.get("group_id"),\r\n        qq=data.get("user_id"),\r\n    )\r\n    await msg_add(msg)\r\n\r\n\r\nasync def get_like(data):\r\n    # \u88ab\u70b9\u8d5e\u4e86\r\n    user_id = data.get("user_id")\r\n    like_id = data.get("likes")[0].get("emoji_id")\r\n    info = {\r\n        "action": "get_msg",\r\n        "params": {\r\n            "message_id": data.get("message_id"),\r\n        },\r\n        "echo": "get_like" + "|" + str(like_id) + "|" + str(user_id),\r\n    }\r\n    await global_ws.get("ws").send(json.dumps(info))\r\n\r\n\r\nasync def echo_msg_send(echo, data):\r\n    # \u53d1\u9001\u6d88\u606f\u7684\u56de\u5e94\r\n    parts = echo.split("|")\r\n    if len(parts) == 2:\r\n        user_id = parts[1]\r\n        info = {\r\n            "action": "get_msg",\r\n            "params": {\r\n                "message_id": data.get("message_id"),\r\n            },\r\n            "echo": f"msg_get|{user_id}",\r\n        }\r\n        await global_ws.get("ws").send(json.dumps(info))\r\n\r\n\r\nasync def echo_msg_get(echo, data):\r\n    # \u83b7\u53d6\u53d1\u9001\u7684\u6d88\u606f\u5e76\u8bb0\u5f55\r\n    parts = echo.split("|")\r\n    if len(parts) == 2:\r\n        user_id = parts[1]\r\n        content = await array_join(data.get("raw_message"))\r\n        msg = Msg(\r\n            robot="LR5921",\r\n            content=content,\r\n            kind=31 if data.get("message_type") == "private" else 32,\r\n            group=data.get("group_id"),\r\n            qq=user_id,\r\n        )\r\n        await msg_log(msg)\r\n\r\n\r\nasync def echo_get_like(echo, data):\r\n    # \u83b7\u53d6\u56de\u5e94\u7684\u539f\u6d88\u606f\r\n    parts = echo.split("|")\r\n    if len(parts) == 3:  # \u786e\u4fdd\u5206\u5272\u540e\u7684\u6570\u7ec4\u6709 3 \u90e8\u5206\r\n        like_id = parts[1]  # \u63d0\u53d6 like_id\r\n        user_id = parts[2]  # \u63d0\u53d6 user_id\r\n        content = await array_join(data.get("raw_message"))\r\n        msg = Msg(\r\n            robot="LR5921",\r\n            content=content,\r\n            kind=35,\r\n            info=config["emojis"].get(int(like_id), "\u672a\u77e5\u8868\u60c5"),\r\n            group=data.get("group_id"),\r\n            qq=user_id,\r\n        )\r\n        await msg_add(msg)\r\n\r\n\r\nasync def echo_revoke(data):\r\n    # \u83b7\u53d6\u64a4\u56de\u7684\u539f\u6d88\u606f\r\n    content = await array_join(data.get("raw_message"))\r\n    msg = Msg(\r\n        robot="LR5921",\r\n        content=content,\r\n        kind=19 if data.get("message_type") == "private" else 29,\r\n        group=data.get("group_id"),\r\n        qq=data.get("user_id"),\r\n    )\r\n    await msg_add(msg)\r\n\r\n\r\nasync def echo_flush_speak(data):\r\n    # \u5237\u65b0\u7fa4\u6210\u5458\u6700\u540e\u53d1\u8a00\u65f6\u95f4\r\n    asia_tz = ZoneInfo("Asia/Shanghai")\r\n    today_start = datetime.now(asia_tz).replace(\r\n        hour=0, minute=0, second=0, microsecond=0\r\n    )\r\n    today_start = int(today_start.timestamp())\r\n\r\n    for user in data:\r\n        last_sent_time = user["last_sent_time"]\r\n        if last_sent_time < today_start:  # \u53ea\u5237\u65b0\u672a\u663e\u793a\u4eca\u65e5\u53d1\u8a00\u7684\r\n            info = {\r\n                "action": "get_group_member_info_rate_limited",\r\n                "params": {\r\n                    "group_id": config["\u6c34\u7fa4"],\r\n                    "user_id": user["user_id"],\r\n                    "no_cache": True,  # \u5f3a\u5236\u5237\u65b0\u7f13\u5b58\r\n                },\r\n            }\r\n            await task_queue.put(info)\r\n\r\n\r\nasync def echo_get_speak(data):\r\n    #  \u83b7\u53d6\u4eca\u65e5\u53d1\u8a00\u7684\u4eba\r\n    asia_tz = ZoneInfo("Asia/Shanghai")\r\n    today_start = datetime.now(asia_tz).replace(\r\n        hour=0, minute=0, second=0, microsecond=0\r\n    )  # \u83b7\u53d6\u4eca\u5929\u7684\u5f00\u59cb\u65f6\u95f4\u6233\uff08\u4ece\u96f6\u70b9\u5f00\u59cb\uff09\r\n    today_start = int(today_start.timestamp())\r\n\r\n    today_speakers = []\r\n    for user in data:\r\n        last_sent_time = user["last_sent_time"]\r\n        if last_sent_time >= today_start:\r\n            today_speakers.append(\r\n                {"nickname": user["nickname"], "user_id": user["user_id"]}\r\n            )\r\n\r\n    content = "\u4eca\u65e5\u6c34\u7fa4\u53d1\u8a00:" + ",".join(\r\n        speaker["nickname"] for speaker in today_speakers\r\n    )\r\n\r\n    # \u53d1\u9001\u81f3\u5185\u9601\r\n    info = {\r\n        "action": "send_msg",\r\n        "params": {"group_id": config["\u5185\u9601"], "message": content},\r\n        "echo": "msg_send",\r\n    }\r\n    await global_ws.get("ws").send(json.dumps(info))\r\n\r\n\r\nasync def echo_get_talkative(data):\r\n    user_id = data["current_talkative"]["user_id"]\r\n    nickname = data["current_talkative"]["nickname"]\r\n\r\n    # \u53d1\u9001\u81f3\u5185\u9601\r\n    content = "\u4eca\u65e5\u6c34\u7fa4\u9f99\u738b:" + nickname\r\n\r\n    info = {\r\n        "action": "send_msg",\r\n        "params": {"group_id": config["\u5185\u9601"], "message": content},\r\n        "echo": "msg_send",\r\n    }\r\n    await global_ws.get("ws").send(json.dumps(info))\r\n\r\n\r\nasync def echo_get_users(data):\r\n    # \u83b7\u53d6\u7fa4\u6210\u5458\r\n    if data[0]["group_id"] == 920712228:\r\n        # \u6c34\u7fa4\u548c\u5e73\u53f0\u7fa4\r\n        i = 1\r\n    else:\r\n        # \u793e\u5458\u7fa4\r\n        i = 2\r\n    user_list = [(user["user_id"], user["nickname"]) for user in data]\r\n    await add_users(user_list, i)\r\n\r\n\r\nasync def echo_get_file(echo, data):\r\n    parts = echo.split("|")\r\n    if len(parts) == 2:\r\n        qq = parts[1]\r\n        url = data.get("file")\r\n        content = os.path.basename(url)\r\n        msg = Msg(\r\n            robot="LR5921",\r\n            content=content,\r\n            kind=5,\r\n            file_url=url,\r\n            qq=qq,\r\n            seq=data.get("message_id"),\r\n        )\r\n        await msg_add(msg)\r\n\r\n\r\nasync def echo_add_activities(echo, data):\r\n    # \u6dfb\u52a0\u6d3b\u52a8\u7684\u6d88\u606f\u5e8f\u53f7\r\n    parts = echo.split("|")\r\n    if len(parts) == 2:\r\n        task_id = parts[1]\r\n        msg_id = data.get("message_id")\r\n        await activities_edit(task_id, "msg_id", msg_id)\r\n\r\n\r\nasync def echo_add_activity_group(echo, data):\r\n    print(1)\r\n    # \u6dfb\u52a0\u6d3b\u52a8\u7684\u4e8c\u7ef4\u7801\u56fe\u7247\u5e8f\u53f7\r\n    parts = echo.split("|")\r\n    if len(parts) == 2:\r\n        task_id = parts[1]\r\n        pic_id = data.get("message_id")\r\n        print(pic_id)\r\n        await activities_edit(task_id, "pic_id", pic_id)\n'})})]})]})}function p(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(_,{...n})}):_(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>i,x:()=>o});var t=r(6540);const a={},s=t.createContext(a);function i(n){const e=t.useContext(s);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:i(n.components),t.createElement(s.Provider,{value:e},n.children)}}}]);